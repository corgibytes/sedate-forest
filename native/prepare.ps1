using namespace System.Xml.Linq

Set-PSDebug -Trace 2

$scriptDirectory = Split-Path -Parent $MyInvocation.MyCommand.Definition

$libraries = Get-Content -Raw "$scriptDirectory/libraries.json" | ConvertFrom-Json
$platforms = Get-Content -Raw "$scriptDirectory/platforms.json" | ConvertFrom-Json

function Write-NativeProjectTemplate {
    param (
        [string]$ProjectType,
        [string]$Path
    )

    $projectReferences = @()
    foreach ($library in $libraries) {
        $projectReferences += [XElement]::new("ProjectReference",
            [XAttribute]::new("Include", "{0}/Corgibytes.SedateForest.{0}.{1}" -f ($library.name, $ProjectType))
        )
    }

    $projectDocument = [XDocument]::new(
        [XComment]::new(" Do not edit. This file is autogenerated by build.ps1. Any changes may be erased. "),
        [XElement]::new("Project",
            [XAttribute]::new("Sdk", "Microsoft.Build.Traversal"),
            [XElement]::new("ItemGroup", $projectReferences)
        )
    )

    $projectDocument.ToString() | Set-Content -Path $Path
}

function Write-NativeProject {
    Write-NativeProjectTemplate -ProjectType "cproj" -Path "packaging/Corgibytes.SedateForest.native.csproj"
}

function Write-NativeLibraryProject {
    Write-NativeProjectTemplate -ProjectType "csproj" -Path "packaging/Corgibytes.SedateForest.NativeLibrary.csproj"
}

function Write-NativeLibraryRuntimeProject {
    Write-NativeProjectTemplate -ProjectType "runtime.csproj" -Path "packaging/Corgibytes.SedateForest.NativeLibrary.runtime.csproj"
}

function Write-LibraryNativeProject {
    param (
        [string]$LibraryName,
        [string[]]$Includes,
        [string[]]$Compiles
    )

    $includeDirectoryElements = @()
    foreach ($include in $Includes) {
        $includeDirectoryElements += [XElement]::new("IncludeDirectory",
            [XAttribute]::new("Include",
                "../../vendor/$LibraryName/$include"
            )
        )
    }

    $compileElements = @()
    foreach ($compile in $Compiles) {
        $compileElements += [XElement]::new("Compile",
            [XAttribute]::new("Include",
                "../../vendor/$LibraryName/$compile"
            )
        )
    }

    $projectDocument = [XDocument]::new(
        [XComment]::new(" Do not edit. This file is autogenerated by build.ps1. Any changes may be erased. "),
        [XElement]::new("Project",
            [XAttribute]::new("Sdk", "Vezel.Zig.Sdk"),
            [XElement]::new("PropertyGroup",
                [XElement]::new("OutputPath",
                    'bin/$(Configuration)'
                )
            ),

            [XElement]::new("ItemGroup",
                $includeDirectoryElements + $compileElements
            )
        )
    )

    $projectDocument.ToString() | Set-Content -Path "$scriptDirectory/packaging/$LibraryName/Corgibytes.SedateForest.$LibraryName.cproj"

}

function New-PackageDirectory {
    param (
        [string]$LibraryName
    )

    New-Item -ItemType Directory -Path "$scriptDirectory/packaging" -Name $LibraryName -Force
}

function Write-LibraryNativeProjects {
    foreach ($library in $libraries) {
        New-PackageDirectory -LibraryName $library.name
        Write-LibraryNativeProject -LibraryName $library.name -Includes $library.include -Compiles $library.compile
    }
}

function Write-LibraryNativeLibraryProject {
    param (
        [string]$LibraryName
    )

    $packageReferences = @()
    foreach ($platform in $platforms) {
        $packageReferences += [XElement]::new("PackageReference",
            [XAttribute]::new("Include",
                "$LibraryName.runtime.$platform"
            ),
            [XAttribute]::new("Version",
                "*"
            )
        )
    }

    $projectDocument = [XDocument]::new(
        [XComment]::new(" Do not edit. This file is autogenerated by build.ps1. Any changes may be erased. "),
        [XElement]::new("Project",
            [XAttribute]::new("Sdk", "Microsoft.Build.NoTargets"),
            [XElement]::new("PropertyGroup",
                [XElement]::new("TargetFramework", "netstandard2.0"),
                [XElement]::new("IsPackable", "true"),
                [XElement]::new("PackageId", '$(AssemblyName)'),
                [XElement]::new("AppendTargetFrameworkToOutputPath", "false"),
                [XElement]::new("PackageOutputPath", "../../../nupkgs")
            ),
            [XElement]::new("ItemGroup",
                $packageReferences
            )
        )
    )

    $projectDocument.ToString() | Set-Content -Path "$scriptDirectory/packaging/$LibraryName/Corgibytes.SedateForest.$LibraryName.csproj"

}

function Write-LibraryNativeLibraryProjects {
    foreach ($library in $libraries) {
        New-PackageDirectory -LibraryName $library.name
        Write-LibraryNativeLibraryProject -LibraryName $library.name
    }
}

function Write-LibraryNativeLibraryRuntimeProject {
    param (
        [string]$LibraryName
    )

    $packageReferences = @()
    foreach ($platform in $platforms) {
        $packageReferences += [XElement]::new("PackageReference",
            [XAttribute]::new("Include",
                "$LibraryName.runtime.$platform"
            ),
            [XAttribute]::new("Version",
                "*"
            )
        )
    }

    $projectDocument = [XDocument]::new(
        [XComment]::new(" Do not edit. This file is autogenerated by build.ps1. Any changes may be erased. "),
        [XElement]::new("Project",
            [XAttribute]::new("Sdk", "Microsoft.Build.NoTargets"),
            [XElement]::new("PropertyGroup",
                [XElement]::new("TargetFramework", "netstandard2.0"),
                [XElement]::new("IsPackable", "true"),
                [XElement]::new("PackageId", '$(AssemblyName).$(RuntimeIdentifier)'),
                [XElement]::new("AppendTargetFrameworkToOutputPath", "false"),
                [XElement]::new("PackageOutputPath", "../../../nupkgs")
            ),
            [XElement]::new("ItemGroup",
                [XElement]::new("None",
                    [XAttribute]::new("Include", 'bin/$(Configuration)/$(RuntimeIdentifier)/*'),
                    [XElement]::new("Link", '%(Filename)%(Extension)'),
                    [XElement]::new("Pack", "true"),
                    [XElement]::new("PackagePath", 'runtimes/$(RuntimeIdentifier)/native')
                )
            )
        )
    )

    $projectDocument.ToString() | Set-Content -Path "$scriptDirectory/packaging/$LibraryName/Corgibytes.SedateForest.$LibraryName.runtime.csproj"

}

function Write-LibraryNativeLibraryRuntimeProjects {
    foreach ($library in $libraries) {
        New-PackageDirectory -LibraryName $library.name
        Write-LibraryNativeLibraryRuntimeProject -LibraryName $library.name
    }
}

Write-NativeProject
Write-NativeLibraryProject
Write-NativeLibraryRuntimeProject
Write-LibraryNativeProjects
Write-LibraryNativeLibraryProjects
Write-LibraryNativeLibraryRuntimeProjects
